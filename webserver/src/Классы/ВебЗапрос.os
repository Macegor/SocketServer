// BSLLS:ExportVariables-off

#Использовать strings

#Область ОписаниеПеременных

// TCPСоединение - Соединение генерируемое сервером, используется для ответа на запрос
Перем Соединение;
// Строка - Тип http запроса (GET/POST/PUD и т.д)
Перем ТипЗапроса;
// Строка - url адрес запрашиваемого ресурса
Перем Адрес;
// Строка - Версия протокола http
Перем ВерсияHTTP;
// Соответствие - Заголовки запроса
Перем Заголовки;
// Соответствие - Параметры запроса из url
Перем ПараметрыЗапроса;
// Строка, ДвоичныеДанные - Полученное тело
Перем Тело;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта(Знач TCPСоединение)
	
	Соединение = TCPСоединение;
	ТипЗапроса = "";
	Адрес = "";
	ВерсияHTTP = "";
	Заголовки = Новый Соответствие();	
	ПараметрыЗапроса = Новый Соответствие();
	Тело = "";
		
	РазобратьЗапрос();

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает заголовки запроса
//
//  Возвращаемое значение:
//   Соответствие - заголовки запроса
//
Функция ПолучитьЗаголовки() Экспорт
	Возврат Заголовки;	
КонецФункции

// Возвращает url параметры запроса
//
//  Возвращаемое значение:
//   Соответствие - параметры запроса
//
Функция ПолучитьПараметрыЗапроса() Экспорт
	Возврат ПараметрыЗапроса;
КонецФункции

// Возвращает тело запроса как строку
//
//  Возвращаемое значение:
//   Строка - тело запроса
//
Функция ПолучитьТелоКакСтроку() Экспорт
	Возврат Тело; 
КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ПолучитьОсновныеДанные() Экспорт
	
	Возврат Новый Структура("Соединение, ТипЗапроса, ВерсияHTTP", Соединение, ТипЗапроса, ВерсияHTTP);

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РазобратьЗапрос()

	// Подготовливаем полученные строковые данные для обработки
	ДанныеЗапросаСтрока = Соединение.ПрочитатьСтроку();
	ДанныеЗапросаМассив = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ДанныеЗапросаСтрока, Символы.ПС);
	
	// Обработка данных
	Индекс = 0;
	ЧтениеТела = Ложь;
	Пока Индекс <> ДанныеЗапросаМассив.Количество() Цикл
		
		ТекстЭлемента = ДанныеЗапросаМассив[Индекс];
		// Обрабатываем основные данные запроса - тип, адрес, параметры url и версию протокола
		Если Индекс = 0 Тогда
			ОсновныеДанные = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ДанныеЗапросаМассив[0], " ");			
			ТипЗапроса = ОсновныеДанные[0];
			Адрес = ОсновныеДанные[1];
			ВерсияHTTP = ОсновныеДанные[2];
			ПоложениеНачалаПараметров = СтрНайти(Адрес, "?");
			Если ПоложениеНачалаПараметров = 0 Тогда
				Индекс = Индекс + 1;
				Продолжить;			
			КонецЕсли;
			// Обработка параметров запроса
			ПараметрыЗапросаСтрокой = Прав(Адрес, СтрДлина(Адрес) - ПоложениеНачалаПараметров);
			МассивПараметровСтрокой = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ПараметрыЗапросаСтрокой, "&");
			Для каждого Элемент Из МассивПараметровСтрокой Цикл
				ДанныеПараметра = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(Элемент, "=");	
				Ключ = ДанныеПараметра[0];
				Значение = СокрЛП(ДанныеПараметра[1]);		
				ПараметрыЗапроса.Вставить(Ключ, Значение);		
			КонецЦикла;		
		// Как только попадается пустая строка, переводим дальнейшую обработку в режим получения тела
		ИначеЕсли СокрЛП(ТекстЭлемента) = "" Тогда
			ЧтениеТела = Истина;
		ИначеЕсли ЧтениеТела Тогда
			Тело = Тело + ТекстЭлемента + Символы.ПС;
		// Для всех остальных данных идёт разбор как заголовка
		Иначе
			ДанныеЗаголовка = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ТекстЭлемента, ":");	
			Ключ = ДанныеЗаголовка[0];
			Значение = СокрЛП(ДанныеЗаголовка[1]);
			Заголовки.Вставить(Ключ, Значение);
		КонецЕсли;
		
		Индекс = Индекс + 1;

	КонецЦикла;

	Тело = СокрЛП(Тело);

КонецПроцедуры

#КонецОбласти
